{"version":3,"sources":["components/Home.js","components/About.js","components/Projects.js","components/Error.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Home","Component","About","className","Projects","href","target","rel","Error","Navigation","id","to","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wXA2BeA,G,uLATP,OACI,gCACI,4BAJW,0BAKX,4BAJU,kC,GAHPC,cCHJC,EATD,WACV,OACG,yBAAKC,UAAU,SACZ,wCACA,2DCmBKC,G,YApBE,WACb,OACI,6BAEI,yBAAKD,UAAU,YACX,wCACA,4DACA,yBAAKA,UAAU,SACX,uBAAGE,KAAK,6CAA6CC,OAAO,SAASC,IAAI,uBAAsB,wCAC/F,uBAAGF,KAAK,wCAAwCC,OAAO,SAASC,IAAI,uBAAsB,0CAC1F,uBAAGF,KAAK,yCAAyCC,OAAO,SAASC,IAAI,uBAAsB,2CAC3F,uBAAGF,KAAK,kDAAkDC,OAAO,SAASC,IAAI,uBAAsB,oDACpG,uBAAGF,KAAK,IAAIC,OAAO,SAASC,IAAI,uBAAsB,+CCP3DC,EARD,WACV,OACG,6BACG,4DCkBKC,G,MAdI,WACf,OACG,6BACI,4BACI,4BAAI,kBAAC,IAAD,CAASC,GAAG,OAAOC,GAAG,KAAtB,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,aAAZ,aACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,gBC2CJC,E,iLAjBX,OACG,kBAAC,IAAD,KACC,6BACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWd,EAAMe,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWZ,IAEhC,kBAAC,IAAD,CAAOW,KAAK,YAAYC,UAAWV,IACpC,kBAAC,IAAD,CAAOU,UAAWN,W,GAXZP,aC5BEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e28b69f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style/Home.css';\n\n \n// const home = () => {\n//     return (\n//        <div>\n//           <h1>Home</h1>\n//            <p>Home page body content</p>\n//        </div>\n//     );\n// }\n\n\nclass Home extends Component {\n    render() {\n        const mainHeader = \"Monica Valencia Ocampo\"; //This variable is used below\n        const subHeader = \"Junior Software Developer\"; //This variable is used below\n        return (\n            <header> \n                <h1>{mainHeader}</h1> \n                <h3>{subHeader}</h3>\n            </header>\n        );\n    }\n};\n \nexport default Home;","import React from 'react';\n \nconst About = () => {\n    return (\n       <div className='about'>\n          <h1>About Me</h1>\n          <p>About Me page body content</p>\n       </div>\n    );\n}\n \nexport default About;","import React from 'react';\nimport './style/Projects.css';\n// import {bounce} from 'react-animations';\n\n\nconst Projects = () => {\n    return (\n        <div>\n\n            <div className='projects'>\n                <h1>Projects</h1>\n                <h3>These are my projects so far</h3>\n                <nav className='links'>\n                    <a href=\"https://monica-vo.github.io/keycodefinder/\" target=\"_blank\" rel=\"noopener noreferrer\"><h4>KeyCode</h4></a>\n                    <a href=\"https://monica-vo.github.io/dicegame/\" target=\"_blank\" rel=\"noopener noreferrer\"><h4>Dice game</h4></a>\n                    <a href=\"https://monica-vo.github.io/zenGarden/\" target=\"_blank\" rel=\"noopener noreferrer\"><h4>Zen Garden</h4></a>\n                    <a href=\"https://monica-vo.github.io/birthdaycalculator/\" target=\"_blank\" rel=\"noopener noreferrer\"><h4>Birthday Calculator</h4></a>\n                    <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><h4>Cyber Pet</h4></a>\n                </nav>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Projects;","import React from 'react';\n \nconst Error = () => {\n    return (\n       <div>\n          <p>Error: Page does not exist!</p>\n       </div>\n    );\n}\n \nexport default Error;","import React from 'react';\nimport './style/Navigation.css';\n\n \nimport { NavLink } from 'react-router-dom';\n\n\n\n \nconst Navigation = () => {\n    return (\n       <nav>\n           <ul>\n               <li><NavLink id=\"home\" to=\"/\">Home</NavLink></li>\n               <li><NavLink to=\"/about\">About</NavLink></li>\n               <li><NavLink to=\"/projects\">Projects</NavLink></li>\n               <li><NavLink to=\"/contact\">Contact</NavLink></li>\n               \n           </ul>\n       </nav>\n    );\n}\n \nexport default Navigation;","// import React from 'react';\n// // import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { Component } from 'react';// import logo from './logo.svg';\nimport './App.css';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport Contact from './components/Contact';\nimport Projects from './components/Projects';\n\nimport Error from './components/Error';\nimport Navigation from './components/Navigation';\n\nclass App extends Component {\n  render() {\n    return (      \n       <BrowserRouter>\n        <div>\n          <Navigation />\n            <Switch>\n             <Route path=\"/\" component={Home} exact/>\n             <Route path=\"/about\" component={About}/>\n             {/* <Route path=\"/contact\" component={Contact}/> */}\n             <Route path=\"/projects\" component={Projects}/>\n            <Route component={Error}/>\n           </Switch>\n        </div> \n      </BrowserRouter>\n    );\n  }\n}\n \nexport default App;\n\n// En caso de problemas o dudas con el router visitar https://www.golangprograms.com/how-to-create-simple-react-router-to-navigate-multiple-pages.html ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}